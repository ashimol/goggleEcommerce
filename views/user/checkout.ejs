<!DOCTYPE html>
<html lang="zxx">

<head>
	<title>Goggles Ecommerce Category Bootstrap responsive Web Template | Home :: w3layouts</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<meta charset="utf-8">
	<meta name="keywords" content="Goggles a Responsive web template, Bootstrap Web Templates, Flat Web Templates, Android Compatible web template, 
Smartphone Compatible web template, free webdesigns for Nokia, Samsung, LG, SonyEricsson, Motorola web design" />
	<script>
		addEventListener("load", function () {
			setTimeout(hideURLbar, 0);
		}, false);

		function hideURLbar() {
			window.scrollTo(0, 1);
		}
	</script>
	<link href="/css/bootstrap.css" rel='stylesheet' type='text/css' />
	<link href="/css/login_overlay.css" rel='stylesheet' type='text/css' />
	<link href="/css/style6.css" rel='stylesheet' type='text/css' />
	<link rel="stylesheet" href="/css/shop.css" type="text/css" />
	<link rel="stylesheet" href="/css/owl.carousel.css" type="text/css" media="all">
	<link rel="stylesheet" href="/css/owl.theme.css" type="text/css" media="all">
	<link href="/css/style.css" rel='stylesheet' type='text/css' />
	<link href="/css/fontawesome-all.css" rel="stylesheet">
	<link href="//fonts.googleapis.com/css?family=Inconsolata:400,700" rel="stylesheet">
	<link href="//fonts.googleapis.com/css?family=Poppins:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800"
	    rel="stylesheet">
		<style>
			.dropdown{
				position: relative;
				display: inline-block;
			}
			.dropdown-content{
				display: none;
				position: absolute;
				background-color: aqua;
				min-width: 160px;
				box-shadow: 0px 8px 16px 6px rgba(0, 0, 0,2);
				z-index: 1000;
				right: 0;

			}
			.dropdown-content a {
				color: black;
				padding: 12px 16px;
				text-decoration: none;
				display: block;
				width: 100%;
			}
			.dropdown-content a:hover{
				background-color:whitesmoke;
			}
			.dropdown:hover .dropdown-content{
				display: block;
			}
			.header{
				position: relative;
				z-index: 500;
			}
		</style>
</head>
<body>
	<div class="banner-top container-fluid" id="home"> 
		<!-- header -->
<%- include("../../views/partials/user/header") %>

<style>
 /* General Body Styles */
body {
    font-family: Roboto, Arial, sans-serif;
    background-color: #f1f3f6;
    color: #212121;
    margin: 0;
    padding: 0;
}

/* Main container setup */
.main {
    display: flex;
    padding: 20px;
    gap: 20px;
    max-width: 1280px;
    margin: 0 auto;
}

.container1 {
    flex: 2;
    background: white;
    border-radius: 2px;
    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.2);
    padding: 16px;
}

/* Header Styles */
.header {
    padding: 16px;
    border-bottom: 1px solid #f0f0f0;
}

.header h1 {
    font-size: 18px;
    font-weight: 500;
    color: #212121;
    margin: 0;
}

.header p {
    font-size: 14px;
    color: #878787;
    margin-top: 8px;
}

/* Address Section Styles */
.addresses {
    padding: 16px;
}

.addresses h2 {
    font-size: 16px;
    font-weight: 500;
    color: #212121;
    margin-bottom: 16px;
}

.new-address-btn {
    background-color: #2874f0;
    color: white;
    padding: 12px 20px;
    font-size: 14px;
    font-weight: 500;
    border: none;
    border-radius: 2px;
    cursor: pointer;
}

/* Card Styles for Address */
.card {
    border: 1px solid #e0e0e0;
    border-radius: 2px;
    padding: 16px;
    margin-bottom: 16px;
}

.card h5 {
    font-size: 14px;
    font-weight: 500;
    color: #212121;
    margin-bottom: 8px;
}

.card p {
    font-size: 14px;
    color: #666;
    margin: 4px 0;
}

.card button {
    background-color: #2874f0;
    color: white;
    padding: 8px 16px;
    border: none;
    border-radius: 2px;
    font-size: 14px;
    cursor: pointer;
}

/* Coupon Section */
.coupon-section {
    padding: 16px;
    border-top: 1px solid #f0f0f0;
}

.coupon-section select {
    width: 100%;
    padding: 8px;
    border: 1px solid #e0e0e0;
    border-radius: 2px;
    font-size: 14px;
}

.coupon-section button {
    background-color: #2874f0;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 2px;
    font-size: 14px;
    margin-top: 12px;
}

/* Cart Details Section */
.cart-detail {
    background: white;
    border-radius: 2px;
    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.2);
    padding: 16px;
}

.cart-detail h2 {
    font-size: 16px;
    font-weight: 500;
    color: #212121;
    padding-bottom: 16px;
    border-bottom: 1px solid #f0f0f0;
    justify-content: space-between;
}

.cart-detail ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

.cart-detail li {
    padding: 12px 0;
    display: flex;
    justify-content: space-between;
    font-size: 14px;
    color: #212121;
}

.product-price {
    color: #212121;
    font-weight: 500;
}

/* Payment Method Section */
.payment-methods {
    margin-top: 20px;
    padding: 16px;
    background: white;
    border-radius: 2px;
    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.2);
}

.payment-methods label {
    display: block;
    font-size: 14px;
    color: #212121;
    margin-bottom: 12px;
}

/* Place Order Button */
.place-order-btn {
    background-color: #fb641b;
    color: white;
    padding: 16px;
    width: 100%;
    font-size: 16px;
    font-weight: 500;
    border: none;
    border-radius: 2px;
    cursor: pointer;
    margin-top: 16px;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .main {
        flex-direction: column;
        padding: 12px;
    }

    .container1 {
        margin-bottom: 16px;
    }
    
    .cart-detail {
        margin-top: 16px;
    }
}

/* Price Details Section */
.price-details {
    background: white;
    padding: 16px;
    border-radius: 2px;
    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.2);
}

.price-details h3 {
    font-size: 16px;
    font-weight: 500;
    color: #212121;
    padding-bottom: 12px;
    border-bottom: 1px solid #f0f0f0;
}

/* Breadcrumb Styles */
.services-breadcrumb {
    background: white;
    padding: 12px 0;
    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);
}

.inner_breadcrumb ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    align-items: center;
}

.inner_breadcrumb li {
    font-size: 14px;
    color: #878787;
}

.inner_breadcrumb a {
    color: #2874f0;
    text-decoration: none;
}

.inner_breadcrumb i {
    margin: 0 8px;
    color: #878787;
}
</style>

    <div class="banner_inner">
        <div class="services-breadcrumb">
            <div class="inner_breadcrumb">
                <ul class="short">
                    <li>
                        <a href="/">Home</a>
                        <i>|</i>
                    </li>
                    <li>checkout</li>
                </ul>
            </div>
        </div>
    </div>
    <div class="header">
        <h1>Checkout</h1>
        <p>Please review your order and provide your address.</p>
    </div>

<div class="main ">
<div class="container1">
    
    <div class="addresses">
        <h2>Addresses</h2>
        <button class="new-address-btn" onclick="toggleNewAddressForm()">NEW ADDRESS</button>

        <div id="addressList">
            <% if (addresses.length > 0) { %>
                <% addresses.forEach(address => { %>
                    <div class="card" data-address-id="<%= address._id %>">
                        <div class="card-body">
                            <h5 class="card-title"><%= address.house %></h5>
                            <p class="card-text"> <%= address.city %>, <%= address.state %>,<%= address.pin %> , <%= address.landMark %></p>
                            <p class="card-text">Phone: <%= address.contactNo %></p>
                            <input type="radio" name="selectedAddress" value="<%= address._id %>" onclick="selectAddress('<%= address._id %>')"> Select this address
                            <button class="edit-btn" onclick="editAddress('<%= address._id %>')">Edit</button>
                        </div>
                    </div>
                <% }) %>
            <% } else { %>
                <p>No addresses found. Please add a new address.</p>
            <% } %>    
      
        </div>
    </div>
        <div class="coupon-section">
            <div class="row">               
                <div class="col-md-11">
                    <div class="coupon-details">
                        <form id="couponForm">
                            <div class="form-group">
                                <label for="availableCoupons">Select a Coupon:</label>
                                <select id="availableCoupons" name="coupon" class="form-control">
                                    <option value="">Select a coupon</option>
                                    <% if (coupons && coupons.length > 0) { %>
                                        <% coupons.forEach(coupon => { %>
                                            <option value="<%= coupon._id %>">
                                                <%= coupon.code %> - <%= coupon.description %> (Valid until: <%= new Date(coupon.endDate).toLocaleDateString() %>)
                                            </option>

                                        <% }) %>
                                       
                                    <% } else { %>
                                        <option value="">No coupons available</option>
                                    <% } %>
                                </select>
                            </div>

                            <button type="button" id="applyCouponBtn" class="btn btn-primary">Apply Coupon</button>
                            <button type="button" id="removeCouponBtn" class="btn btn-danger" style="display:none;">Remove Coupon</button>
                            
                        </form>
                        <div id="couponMessage"></div>
                    </div>
                </div>
            </div>
        </div>       
    


        <div class="new-address-form" id="newAddressForm" style="display:none;">
            <h2>Add New Address</h2>
            <form id="addressForm" onsubmit="saveAddress(event)">
                <input type="text" name="house" placeholder="House" required>
                <input type="text" name="city" placeholder="City" required>
                <input type="text" name="state" placeholder="State" required>
               
                <input type="text" name="pin" placeholder="Pin" required>
                <input type="text" name="landMark" placeholder="landMark" required>
                <input type="tel" name="contactNo" placeholder="Contact Number" required>
                <button type="submit" class="edit-btn">Save Address</button>
                <button type="button" class="cancel-btn" onclick="cancelAddressForm()">Cancel</button>
                <input type="hidden" id="addressId" name="addressId" value="">
            </form>
        </div>
    </div>

    <div class="col-lg-4">
        <!-- Right Column for Cart Total and Payment Method -->
        <div class="cart-detail">
            <h2>Cart Total</h2>
            <ul>
                <li>
                    <!-- <span>Subtotal</span>
                    <span>₹<%= subtotal %></span> -->

                    <ul>
                        <% cartData.items.forEach(item => { %>
                            <li>
                                <span> <%= item.productId.productName   %>          x      <%= item.quantity %>    </span> 
                                 <span><%= item.discount %>    </span>
                                 
                                 <span class="product-price">
                                            
                                    <% if (item.productId.salePrice < item.productId.regularPrice) { %>
                                        ₹<%= (item.productId.salePrice * item.quantity).toFixed(2) %>
                                    <% } else { %>
                                        ₹<%= (item.productId.regularPrice * item.quantity).toFixed(2) %>
                                    <% } %>
                                 </span>
                                
                            </li>
                        <% }) %>
                    </ul>
                </li>
                <li>
                    <span>Discount </span>
                    <span id="discount">₹<%=totalDiscount%></span>
                </li>
                <li>
                    <span>Delivery Charges </span>
                    <span id="discount"><strike>40</strike> FREE</span>
                </li>
                <li>
                    <span>Platform Fee</span>
                    <span id="discount">₹3</span>
                </li>
               
                <li>
                    <span>Order Total</span>
                    <span id="orderTotal">₹<%=subtotal %></span>
                </li>
                
            </ul>
        </div>
        <form id="checkoutForm" onsubmit="handleFormSubmit(event)">
            <input type="hidden" name="cartId" value="<%= cartData._id %>">
            <input type="hidden" name="addressId" id="addressIdForOrder">
            <input type="hidden" name="userId" value="<%= userId %>"> 
            <% cartData.items.forEach((item, index) => { %>
                <input type="hidden" name="items[<%= index %>][productId]" value="<%= item.productId._id %>">
                <input type="hidden" name="items[<%= index %>][quantity]" value="<%= item.quantity %>">
                <input type="hidden" name="items[<%= index %>][salePrice]" value="<%= item.productId.salePrice < item.productId.regularPrice ? item.productId.salePrice : item.productId.regularPrice %>">
            <% }) %>
            <input type="hidden" name="totalAmount" value="<%=subtotal%>">
            <!-- Payment Methods -->
            <div class="payment-methods">
                <h2>Payment Method</h2>
                <label><input type="radio" name="paymentMethod" value="Online Payment" required> Online Payment (Razorpay)</label>
                <label><input type="radio" name="paymentMethod" value="Cash On Delivery" required> Cash on Delivery</label>
                <label><input type="radio" name="paymentMethod" value="WalletPayment" required> Pay from Wallet</label>
            </div>
            <button type="submit" class="place-order-btn">Confirm Order</button>
        </form>
    </div>
</div>
</div>
<%-include("../../views/partials/user/footer")%>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>

<script>
// Toggle new address form for both new and edit operations
function toggleNewAddressForm(address = null) {
    const form = document.getElementById('newAddressForm');
    const formTitle = document.querySelector('#newAddressForm h2');

    form.style.display = 'block';

    if (address) {
        formTitle.innerText = 'Edit Address';
        document.querySelector('input[placeholder="House"]').value = address.house;
        document.querySelector('input[placeholder="City"]').value = address.city;
        document.querySelector('input[placeholder="State"]').value = address.state;
        document.querySelector('input[placeholder="Pin"]').value = address.pin;
        document.querySelector('input[placeholder="landMark"]').value = address.landMark;
       
        document.querySelector('input[placeholder="Contact Number"]').value = address.contactNo;
        document.getElementById('addressId').value = address._id;
    } else {
        formTitle.innerText = 'Add New Address';
        document.getElementById('addressForm').reset();
        document.getElementById('addressId').value = '';
    }
}

// Function to save address (both for new and edit)
async function saveAddress(event) {
    event.preventDefault();
    const formData = new FormData(event.target);
    const data = Object.fromEntries(formData);

    const addressId = document.getElementById('addressId').value;

    const url = addressId ? `/user/edit-address/${addressId}` : '/user/add-new-address';

    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        });

        if (response.ok) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Address saved successfully!',
                confirmButtonText: 'OK',
            }).then(() => {
                location.reload();
            });
        } else {
            const errorMessage = await response.text();
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: `Error: ${errorMessage}`,
                confirmButtonText: 'OK',
            });
        }
    } catch (error) {
        console.error('Error saving address:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while saving the address.',
            confirmButtonText: 'OK',
        });
    }
}


// Handle radio button click to select the address
function selectAddress(addressId) {
    document.getElementById('addressIdForOrder').value = addressId;
}



// Handle edit button click to load form with address details
function editAddress(addressId) {
    const addressCard = document.querySelector(`.card[data-address-id="${addressId}"]`);
    const house = addressCard.querySelector('.card-title').innerText;
    // const details = addressCard.querySelector('.card-text').innerText.split(", ");
    const detailsText = addressCard.querySelector('.card-text').innerText;
    const details = detailsText.split(",");
    //const [ city, state,pin,landMark,] = details;

    const city = details.length > 0 ? details[0] : '';
    const state = details.length > 1 ? details[1] : '';
    const pin = details.length > 2 ? details[2] : '';
    const landMark = details.length > 3 ? details[3] : '';
   
   
    const contactNo = addressCard.querySelector('.card-text:last-of-type').innerText.split(": ")[1];

    const address = {
        _id: addressId,
        house,
        city,
        state,       
        pin,
        landMark,
        contactNo
    };

    toggleNewAddressForm(address);
}

// Handle cancel button click to hide the form
function cancelAddressForm() {
    document.getElementById('newAddressForm').style.display = 'none';
    document.getElementById('addressForm').reset();
}
// Handle form submission for checkout
function handleFormSubmit(event) {
    event.preventDefault();
    
    const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
    if (!selectedAddress) {
        alert('Please select an address for delivery.');
        return;
    }
    
    const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked');
    if (!paymentMethod) {
        alert('Please select a payment method.');
        return;
    }



    const formData = new FormData(event.target);
    const data = Object.fromEntries(formData);

    fetch('/cart/place-order', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        },
        body: JSON.stringify(data),
        credentials: 'include'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            if (data.razorpayOrder) {
                // Handle Razorpay payment
                const options = {
                    key: data.razorpayOrder.key,
                    amount: data.razorpayOrder.amount * 100,
                    currency: data.razorpayOrder.currency,
                    order_id: data.razorpayOrder.id,
                    name: "Goggles",
                    description: "Order Payment",
                    handler: function(response) {
                        verifyPayment(response);
                    },
                    modal: {
                        ondismiss: function() {
                            handlePaymentDismissal();
                        }
                    },
                    prefill: {
                        name: "<%= userId.name %>",
                        email: "<%= userId.email %>",
                        contact: "<%= userId.phone %>"
                    },
                    theme: {
                        color: "#3399cc"
                    }
                };
                
                const rzp = new Razorpay(options);
                rzp.open();
            }else if (paymentMethod === 'Wallet Payment') {
                fetch('/user/check-wallet-balance', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ amount: subtotal }),
                    // body: JSON.stringify(Object.fromEntries(formData))
                })
                .then(response => response.json())
                .then(walletData => {
                    if (walletData.success) {
                        window.location.href = `/orderConfirmation/${walletData.orderId}`;
                    } else {
                        throw new Error(walletData.message);
                    }
                })
                .catch(error => {
                    Swal.fire({
                        title: 'Error',
                        text: error.message,
                        icon: 'error'
                    });
                });
            } else {
                // Handle COD or Wallet payment success
                window.location.href = `/orderConfirmation/${data.orderId}`;
            }
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.error || 'Error placing order'
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while placing the order.'
        });
    });
}

function handlePaymentDismissal() {
    Swal.fire({
        icon: 'warning',
        title: 'Payment Cancelled',
        text: 'You have cancelled the payment. Do you want to try again or view your order?',
        showCancelButton: true,
        // confirmButtonText: 'Retry Payment',
        cancelButtonText: 'View Order'
    }).then((result) => {
        if (result.isConfirmed) {
            window.location.reload();
        } else {
            window.location.href = `/user/my-order`;
        }
    });
}

function verifyPayment(response) {
    fetch('/verify-payment', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(response)
    })
    .then(res => res.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Payment Successful',
                text: 'Your payment has been processed successfully.',
                confirmButtonText: 'Ok'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = `/orderConfirmation/${data.orderId}`;
                }
            });
        } else {
            throw new Error(data.message || 'Payment verification failed');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Payment Failed',
            text: 'Your payment was unsuccessful. Please try again.',
            // confirmButtonText: 'Retry Payment',
            showCancelButton: true,
            cancelButtonText: 'View Orders'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.reload();
            } else {
                window.location.href = `/user/my-order`;
            }
           
        });
    });
}



</script>
<script>
    // Update the existing script section in your EJS file

$(document).ready(function() {
    $('#applyCouponBtn').click(function() {
        const couponId = $('#availableCoupons').val();
        const totalDiscount = $('#discount').text().replace('₹', '').trim();
        if (!couponId) {
            $('#couponMessage').text('Please select a coupon').removeClass('text-success').addClass('text-danger');
            return;
        }

        $.ajax({
            url: '/cart/apply-coupon',
            method: 'POST',
            data: { 
                couponId: couponId,
                totalDiscount: totalDiscount 
            },
            success: function(response) {
                
                // Update all relevant total displays
                updateOrderTotals(response);

                 // Update the order total display
                $('#orderTotal').text(`₹${response.subtotal}`);


               
                const newDiscount =parseInt( response.totalDiscount) + parseInt( response.couponDiscount);
                $('#discount').text(`₹${newDiscount}`);
                
                // Update form hidden input for order total
                $('input[name="totalAmount"]').val(response.subtotal);
                
                // Show success message and handle UI states
                $('#couponMessage').text('Coupon applied successfully!').removeClass('text-danger').addClass('text-success');
                $('#availableCoupons').prop('disabled', true);
                $('#applyCouponBtn').hide();
                $('#removeCouponBtn').show();
            },
            error: function(xhr) {
                const errorMessage = xhr.responseJSON ? xhr.responseJSON.message : 'An error occurred while applying the coupon.';
                $('#couponMessage').text(errorMessage).removeClass('text-success').addClass('text-danger');
            }
        });
    });

    $('#removeCouponBtn').click(function() {
        $.ajax({
            url: '/cart/remove-coupon',
            method: 'POST',
            success: function(response) {
                // Reset all totals to original values
                updateOrderTotals(response);
                
                 // Update the order total display
                 $('#orderTotal').text(`₹${response.subtotal}`);

                 
                 $('#discount').text(`₹${response.totalDiscount}`);

                // Reset form hidden input
                $('input[name="totalAmount"]').val(response.subtotal);
                
                // Reset UI states
                $('#couponMessage').text('Coupon removed successfully!').removeClass('text-danger').addClass('text-success');
                $('#availableCoupons').prop('disabled', false);
                $('#applyCouponBtn').show();
                $('#removeCouponBtn').hide();
            },
            error: function(xhr) {
                const errorMessage = xhr.responseJSON ? xhr.responseJSON.message : 'An error occurred while removing the coupon.';
                $('#couponMessage').text(errorMessage).removeClass('text-success').addClass('text-danger');
            }
        });
    });

    // Helper function to update all total displays
    function updateOrderTotals(response) {
        // Update the cart detail section
        $('#orderTotal').text(`₹${response.orderTotal}`);
        
        // If you have other total displays, update them here
        if ($('#subtotal').length) {
            $('#subtotal').text(`₹${response.totalPrice}`);
        }
        if ($('#discount').length) {
            $('#discount').text(`-₹${response.discount}`);
        }
        if ($('#couponDiscount').length) {
            $('#couponDiscount').text(`₹${response.discountAmount}`);
        }
        if ($('#shippingCost').length) {
            $('#shippingCost').text(`₹${response.shippingCost}`);
        }
    }
});
</script>


